import Boomerang
import Foundation
import Model
import RxRelay
import RxSwift

class {{name|firstUppercase}}ViewModel: RxListViewModel, RxNavigationViewModel {
    let uniqueIdentifier: UniqueIdentifier = UUID()
    
    let routes: PublishRelay<Route> = PublishRelay()

    var disposeBag: DisposeBag = DisposeBag()
    
    let layoutIdentifier: LayoutIdentifier
    
    let itemViewModelFactory: ItemViewModelFactory
    
    let sectionsRelay = BehaviorRelay(value: [])
    
    var isLoading: Observable<Bool> { loadingRelay.isLoading }

    private let useCase: {{name|firstUppercase}}UseCase
    private let routeFactory: RouteFactory
    private var reloadDisposeBag = DisposeBag()
    private let loadingRelay = BehaviorRelay<Int>(value: 0)
    
    init(itemViewModelFactory: ItemViewModelFactory,
         useCase: {{name|firstUppercase}}UseCase,
         routeFactory: RouteFactory) {
        self.useCase = useCase
        self.routeFactory = routeFactory
        self.itemViewModelFactory = itemViewModelFactory
    }
    
    func reload() {
        //always cleanup proper dispose bag
        reloadDisposeBag = DisposeBag()
        let useCase = self.useCase
        let loadingCount = loadingRelay
        useCase
            .{{name|firstLowercase}}() //change if needed
            .map { [weak self] in self?.mapSections(from: $0) ?? []}
            .bindingLoadingStatus(to: loadingCount)
            .catchErrorJustReturn([])
            .bind(to: sectionsRelay)
            .disposed(by: reloadDisposeBag)
    }

    private func mapSections(from items: [{{name|firstUppercase}}]) -> [Section] {
        //map items to item view models using item view model factory
        //example:
        //
        //let first = Section(items: items.map { self.itemViewModelFactory.{{name|firstLowercase}}($0)})
        //return [first]
        
        return []
    }

    func selectItem(at _: IndexPath) {
        // change according to your needs
        guard let item = (self[indexPath] as? {{name|firstUppercase}}ItemViewModel)?.item as? {{name|firstUppercase}} else { return }
        let route = routeFactory.{{name|firstUppercase}}Detail(for: item)
        routes.accept(route)
    }
}
